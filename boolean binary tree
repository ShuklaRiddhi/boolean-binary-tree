You are given the root of a full binary tree with the following properties:

Leaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.
Non-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND.
The evaluation of a node is as follows:

If the node is a leaf node, the evaluation is the value of the node, i.e. True or False.
Otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.
Return the boolean result of evaluating the root node.

A full binary tree is a binary tree where each node has either 0 or 2 children.

A leaf node is a node that has zero children.
   SOLUTION ->




class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int val) {
        this.val = val;
    }
}

public class FullBinaryTreeEvaluator {
    
    public boolean evaluate(TreeNode root) {
        if (root == null) {
            return false; // or true, depending on how you handle empty trees
        }
        
        if (root.left == null && root.right == null) {
            return root.val == 1; // Leaf node, return its value
        }
        
        if (root.val == 2) { // OR operation
            return evaluate(root.left) || evaluate(root.right);
        } else if (root.val == 3) { // AND operation
            return evaluate(root.left) && evaluate(root.right);
        } else {
            return false; // Handle invalid node values
        }
    }
    
    public static void main(String[] args) {
        // Example usage
        FullBinaryTreeEvaluator evaluator = new FullBinaryTreeEvaluator();
        
        // Construct the tree
        TreeNode root = new TreeNode(2); // OR operation at root
        root.left = new TreeNode(3);     // AND operation
        root.left.left = new TreeNode(1); // Leaf node with value True
        root.left.right = new TreeNode(0); // Leaf node with value False
        root.right = new TreeNode(1);    // Leaf node with value True
        
        // Evaluate the root node
        boolean result = evaluator.evaluate(root);
        System.out.println("Result: " + result); // Output should be true
    }
}

 

